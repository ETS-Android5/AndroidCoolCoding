SOURCE ====> https://proandroiddev.com/navigation-architecture-component-for-the-rest-of-us-faafa890e5


Nov, 15 - 2018
####################################################################################################
#################################### A NOTE ABOUT CONFIGURATION ####################################
####################################################################################################

I had a really really hard time configuring this project to use Android Jetpack (androidx).
After struggling with many possible configurations, I realized that configuring gradle.properties
the way it is now helps me to use Jetpack.
Also, it seems that the navigation library version 1.0.0-alpha07 works with appCompatVersion 1.0.0.
I couldn't make it compile with the up-to-date version (1.0.2).


Nov, 15 - 2018
####################################################################################################
#################################### A NOTE ABOUT NAV DRAWER #######################################
####################################################################################################

How do I open an item from the navigation drawer? This is awesome and tricky at the same time.
The key is in the name used in the xml file that defines the navigation. The android:id attribute
used to identify a Fragment, needs to be the same that the android:id in the menu definition file.


Nov, 16 - 2018
####################################################################################################
########################### A NOTE ABOUT SHARED ELEMENT TRANSITIONS ################################
####################################################################################################

Even thought I followed the (very short) explanation in the official documentation on how to perform
shared element transitions, I couldn't make it work. This is the link I followed:
https://developer.android.com/topic/libraries/architecture/navigation/navigation-implementing#shared-element

Nov, 17 - 2018
####################################################################################################
############################### A NOTE ABOUT COLLAPSING TOOLBAR ####################################
####################################################################################################

This one was tricky too. I order to implement this I ended up doing something that I'm not entirely
happy with: the CollapsingToolbarLayout element is located in the hosting Activity layout (activity_main.xml).
Whenever a new Fragment is attached to the hosting Activity, the Fragment itself takes care of
enabling/disabling this view configuration accessing a public method in the Activity.
I don't like this approach because I don't like that the Fragments are aware of some behavior in the
Activity.
I have an idea to avoid this, but requires more time and effort and I'll try it directly in MoviesPreview:
we can have a ViewModel that controls this behavior itself. So, for instance, the ViewModel that shows the
content of the initial Fragment communicates with the ViewModel that controls the behavior of the Activity
and enables/disables the collapsing toolbar when enters to the details screen.